{"version":3,"sources":["NewsPage.js","VideoPage.js","HomePage.js","StockPage.js","App.js","serviceWorker.js","index.js"],"names":["NewsPage","useState","newsSource","setNewsSource","dailyRead","setDailyRead","c","dest_url","process","useEffect","Axios","get","then","data","map","item","index","name","get_list","Promise","all","values","result","rs","read_item","console","log","push","id","entity","date","url","columns","dataField","text","formatter","cell","row","href","target","rel","keyField","sort","a","b","localeCompare","VideoPage","HomePage","StockPage","App","className","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","Link","as","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2db4bac7.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\n\nexport default function NewsPage() {\n  const [newsSource, setNewsSource] = useState([]);\n  const [dailyRead, setDailyRead] = useState([]);\n  const [c] = useState(0);\n  const dest_url = (process.env.REACT_APP_IP??\"127.0.0.1\")+\":\"+(process.env.REACT_APP_PORT??\"538\");\n\n  useEffect(() => {\n    Axios.get(\n      `http://${dest_url}/source?file=news`\n    ).then((data) => {\n      setNewsSource(\n        data.data.data.map((item, index) => {\n          return item.name;\n        })\n      );\n    });\n  }, [c]);\n  useEffect(() => {\n    const get_list = newsSource.map((item) => {\n      return Axios.get(\n        `http://${dest_url}/daily_read?entity=${item}&daily_read_date=3`\n      );\n    });\n    var index = 0;\n    // load data\n    Promise.all(get_list)\n      .then((values) => {\n        var result = [];\n        values.map((rs) => {\n          const read_item = rs.data.data;\n          console.log(read_item);\n          read_item.map((item) => {\n            result.push({\n              id: index,\n              name: item.entity,\n              date: item.date,\n              url: item.url,\n              name: item.name,\n            });\n            index += 1;\n          });\n        });\n\n        setDailyRead(result);\n      })\n      .then(console.log(dailyRead));\n  }, [newsSource]);\n  const columns = [\n    {\n      dataField: \"id\",\n      text: \"ID\",\n    },\n    {\n      dataField: \"name\",\n      text: \"Name\",\n    formatter:(cell,row)=>{return <a href={row.url} target=\"_blank\" rel=\"noopener noreferrer\">{row.name}</a>}\n    },\n    {\n      dataField: \"date\",\n      text: \"DATE\",\n    }\n  ];\n  return <BootstrapTable keyField=\"id\" data={dailyRead.sort((a,b)=>{return b.date.localeCompare(a.date)})} columns={columns} />;\n}\n","import React from \"react\";\nexport default function VideoPage() {\n    return \"hello world\";\n}","import React from \"react\";\nexport default function HomePage() {\n    return \"hello world\";\n}","import React from \"react\";\nexport default function StockPage() {\n    return \"hello world\";\n}","import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport NewsPage from \"./NewsPage\";\nimport VideoPage from \"./VideoPage\";\nimport HomePage from \"./HomePage\";\nimport StockPage from \"./StockPage\";\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <nav>\n          <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand href=\"/\">Daily Read</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <Nav className=\"mr-auto\">\n              <Nav.Link as={Link} to=\"/\" >Home</Nav.Link>\n              <Nav.Link as={Link} to=\"/news\" >News</Nav.Link>\n              <Nav.Link as={Link} to=\"/video\" >Video</Nav.Link>\n              <Nav.Link as={Link} to=\"/stock\" >Stock</Nav.Link>\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n          </nav>\n          \n          {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/news\">\n              <NewsPage />\n            </Route>\n            <Route path=\"/video\">\n              <VideoPage />\n            </Route>\n            <Route path=\"/stock\">\n              <StockPage />\n            </Route>\n            <Route path=\"/\">\n              <HomePage />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}